@using BookRateNetCore.Shared.Models
@using BookRateNetCore.Shared.Services
@using BookRateNetCore.Client.Components.Dialogs
@using BookRateNetCore.Shared

@inject IDialogService DialogService;
@* @inject IBookService BookService; *@
@inject HttpClient httpClient;
@inject NavigationManager Navigation

@page "/test"




<br />
<h1 style="font-size:28px; color:blue; text-align: center; padding:15px">Image upload</h1>
<h3 style="font-size:18px; color:blue; text-align: center; padding:15px">Dodaj Książkę</h3>
<br />






<EditForm Model="@book" OnValidSubmit="@HandleValidSubmit">
    @*     <DataAnnotationsValidator />
    <ValidationSummary /> *@

    <div>
        <label for="title">Tytuł:</label>
        <InputText id="title" @bind-Value="book.Title" />
    </div>
    <br />
    <div>
        <label for="author">Autor:</label>
        <InputText id="author" @bind-Value="book.Author" />
    </div>
    <br />

    <div>
        <label for="description">Opis:</label>
        <InputTextArea id="description" @bind-Value="book.Description" />
    </div>
    <br />

    <div>
        <label for="cover">Okładka książki:</label>
        <InputFile OnChange="HandleFileSelected" />
    </div>
    <br />

    <MudButton type="submit">Dodaj książkę</MudButton>
    <MudButton OnClick="AddBooka">Dodajjjj</MudButton>

</EditForm>

@code {
    private BookModel book = new();
    private IBrowserFile? selectedFile;
    private byte[] tempCoverImage;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

    }


    private string GetImageSrc(byte[]? coverImage)
    {
        if (coverImage == null || coverImage.Length == 0)
            return "https://media.istockphoto.com/id/1352945762/vector/no-image-available-like-missing-picture.jpg?s=612x612&w=0&k=20&c=4X-znbt02a8EIdxwDFaxfmKvUhTnLvLMv1i1f3bToog=";
        // return null;

        var base64Image = Convert.ToBase64String(coverImage);
        return $"data:image/png;base64,{base64Image}";
    }

    private async Task AddBooka()
    {
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(buffer);
            book.CoverImage = buffer;
        }

        var bookToAdd = new Book
            {
                Title = book.Title,
                Author = book.Author,
                Description = book.Description,
                CoverImage = book.CoverImage
            };

        Console.WriteLine("bookToAdd.Title");
        var response = await httpClient.PostAsJsonAsync<Book>($"api/Book/AddBook", bookToAdd);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/bookcollection");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedFile != null)
        {
            var buffer = new byte[selectedFile.Size];
            await selectedFile.OpenReadStream().ReadAsync(buffer);
            book.CoverImage = buffer;
        }

        var bookToAdd = new Book
            {
                Title = book.Title,
                Author = book.Author,
                Description = book.Description,
                CoverImage = book.CoverImage
            };

        Console.WriteLine("bookToAdd.Title");

        // Wyślij dane do serwera za pomocą HTTP POST
        // var response = await httpClient.PostAsJsonAsync("api/books", book);
        var response = await httpClient.PostAsJsonAsync<Book>($"api/Book/AddBook", bookToAdd);

        if (response.IsSuccessStatusCode)
        {
            // Przekieruj do listy książek lub innej strony
            Navigation.NavigateTo("/bookcollection");
        }
    }

    public class BookModel
    {
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public byte[]? CoverImage { get; set; }
    }

    private async Task AddBookAction(Book book)
    {
        await httpClient.PostAsJsonAsync<Book>($"api/Book/AddBook", book);
        //Books = await httpClient.GetFromJsonAsync<List<Book>>("api/Book/GetBooks");
    }

}