@using BookRateNetCore.Shared.Dtos
@using BookRateNetCore.Shared.Models
@using System.ComponentModel.DataAnnotations;
@using BookRateNetCore.Shared.Models
@using BookRateNetCore.Shared.Services
@using MudBlazor

@inject IDialogService DialogService
@inject IBookService BookService

@inject NavigationManager NavigationManager

@page "/newbook"





<div Style="display: flex; margin: 0; width: 100%; height: 100%; box-sizing: border-box;">
    <!-- Left side for image holder -->

        <div Style="margin-top: 20px; width: 100%;">
            <!-- Grid for display images -->
            @* <MudGrid> *@
                <!-- First row with 3 images -->

            
                        @* <MudItem md="4" Style="display: flex; justify-content: center; align-items: center;"> *@
                            <ImageObject></ImageObject>
                        @* </MudItem>                    *@



            @* </MudGrid> *@
        </div>



    <!-- Right side for form -->
    <div Style="display: flex; flex-direction: column; width: 65%; margin: 5px 10px; margin-right:60px; padding: 10px; box-sizing: border-box; height: 100%; justify-content: space-between;">
        <div>
            <MudText Style="text-align:center; font-size:36px; letter-spacing:5px; font-style:oblique;">Add book</MudText>
        </div>
        <div Style="margin-top:30px;">
            <!-- Flexbox container for Title and Select -->
            <div Style="display: flex; gap: 10px; margin-bottom: 20px;">
                <MudTextField T="string" Label="Title" Variant="Variant.Filled" Style="width: 600px;" />
                <MudTextField T="string" Label="Publisher" Variant="Variant.Filled" Style="width: 600px;" />
            </div>

            <div Style="display: flex; gap: 10px; margin-bottom: 40px;">
                <MudTextField T="string" Label="Author" Variant="Variant.Filled" Style="width: 600px; " />
                <MudDatePicker Label="Publication date" />
                <MudTextField T="int" Label="Page Count" Variant="Variant.Filled" Style="width: 100px; " />

                <MudSelect T="string" Label="Category" Variant="Variant.Filled" Style="width: 200px; ">
                    @foreach (var category in CategoryList)
                    {
                        <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                    }
                </MudSelect>

            </div>

            <div style="margin-top:60px;">
                <MudTextField Label="Description" @bind-Value="model.Description" For="@( () => model.Description )" Lines="12" />
            </div>



        </div>

        <div Style="display: flex; justify-content: flex-end; align-items: center; margin-top: 90px; margin-right:40px;">
            <MudText Style="margin-right: 20px; font-size:22px;">Your Rating:</MudText>
            <MudRating ReadOnly="false" @bind-SelectedValue="model.Rate" Size="Size.Large" />
        </div>


        <div Style=" margin-top: 80px; display: flex; justify-content: space-between; align-items: center; padding: 10px;">
            <!-- Przycisk po lewej stronie -->
            <MudButton Variant="Variant.Filled" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Visibility" OnClick="Refresh" Style="width: 160px; height:60px;">
                Preview
            </MudButton>

            <!-- Przycisk po prawej stronie -->
            <div Style="display: flex; gap: 10px;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Style="width: 160px; height:60px;">
                    Submit
                </MudButton>

                <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" Style="width: 160px; height:60px;" @onclick="Cancel">
                    Cancel
                </MudButton>
            </div>
        </div>
    </div>
</div>




@code {
    private bool showColor = true;

    private NewBookDto model = new NewBookDto();
    private List<CategoryDto> CategoryList = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        CategoryList = await BookService.GetCategories();
    }





    // // ================================== for image ==============================================
    // //IList<IBrowserFile> _files = new List<IBrowserFile>();

    // private IBrowserFile? selectedFile;
    // private byte[] tempCoverImage = Array.Empty<byte>();

    // private async Task UploadFiles(IBrowserFile file)
    // {
    //     selectedFile = file;
    //     var buffer = new byte[selectedFile.Size];
    //     await selectedFile.OpenReadStream().ReadAsync(buffer);
    //     tempCoverImage = buffer;     
        
    //     ListImage.ImageList.Add(new ObjectImageList.ImageInfo { Image = buffer });
    // }

    // private string GetImageSrc(byte[]? coverImage)
    // {
    //     if (coverImage == null || coverImage.Length == 0)
    //         return "https://cdn.iconscout.com/icon/free/png-256/free-photo-camera-1780425-1517754.png";
    //     //return null;
    //     var base64Image = Convert.ToBase64String(coverImage);
    //     return $"data:image/png;base64,{base64Image}";
    // }


    // ==================================  for form ==============================================
    //private NewBookForm model = new NewBookForm();
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    internal class NewBookForm
    {
        [Required]
        public string Title { get; set; } = "";
        public string? Description { get; set; } = "";
        public string? Author { get; set; } = "";
        public int Rate { get; set; }
        public byte[]? CoverImage { get; set; }

    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Submit(EditContext context)
    {
        if (context.Validate())
        {
            MudDialog.Close<Book>(new Book
                {
                    Author = model.Author,
                    Description = model.Description,
                    Rate = model.Rate,
                    Title = model.Title,
                    //CoverImage = tempCoverImage

                });
        }
    }

}
