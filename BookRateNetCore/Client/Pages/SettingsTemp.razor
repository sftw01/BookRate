@page "/SettingsTemp"

@inject IDialogService DialogService;
@inject IBookService BookService
@inject ISnackbar Snackbar




@using BookRateNetCore.Client.Components.Dialogs
@using BookRateNetCore.Shared.Dtos
@using BookRateNetCore.Shared.Services

@* <div style="background-color:aqua; width:100%; height:90vh;"> *@
<div style="width:100%; height:90vh;">
    @* <div style="text-align:center; letter-spacing:3px; background-color:aquamarine; height:100%;"> *@
    <div style="text-align:center; height:100%;">
        <p style="font-size:26px;">Settings - draft page</p>

        <!-- Główny kontener z ustawionym flexboxem -->
        <div style="display:flex; justify-content:space-around; height:85vh;">

            <!-- categories list -->
            @* <div style="background-color:chartreuse; height:40%; width:30%;"> *@
            <div style=" height:40%; width:30%;">
                <p style="font-size:22px; text-align:center;">Book categories</p>
                <MudPaper Class="d-flex flex-column overflow-x-auto " Height="40vh" Outlined="true">
                    <MudSimpleTable Style="overflow-x: auto;">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th style="width:300px;">Name</th>
                                <th>Action <MudButton Variant="Variant.Filled" Color="Color.Success" Style="margin-left:25px;" OnClick="AddCategory">Add</MudButton> </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var Category in CategoryList)
                            {
                                var x = index;

                                <tr>
                                    <td>@x</td>
                                    <td>@Category.Name</td>
                                    <td style="display: flex; gap: 10px;">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => Edit(Category))">Edit</MudButton>
                                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="(() => Delete(Category.Id))">Delete</MudButton>
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudPaper>
            </div>
            <!-- secons dide for images  -->
            @* <div style="background-color:burlywood; height:100%; width:40%;"> *@
            <div style=" height:100%; width:40%;">
                <p style="font-size:22px; text-align:center;">Default images</p>

                <MudPaper Elevation="4" Class="pa-4">
                    <MudImage Src="@GetImageSrc(tempCoverImage)" ObjectFit="ObjectFit.Cover" Height="300" Width="300" Style="margin-top: 10px;" />
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ActivatorContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Style="margin-top: 15px;">
                                Add Image
                            </MudButton>
                        </ActivatorContent>
                    </MudFileUpload>

                        @if (imageData != null)
                        {
                            <MudItem>
                                <MudImage Src="@imageData" Alt="Podgląd obrazu" Width="300" />
                            </MudItem>
                        }

                        <MudItem Class="mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm">
                                Prześlij Obraz
                            </MudButton>
                        </MudItem>
                  
                </MudPaper>

            </div>
        </div>
    </div>
</div>






@code {

    // ================================================== for categories purposes ==================================================
    private int index = 1;
    private List<CategoryDto> CategoryList = new List<CategoryDto>();


    protected override async Task OnInitializedAsync()
    {
        CategoryList = await BookService.GetCategories();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        ResetIndex();
    }

    private void ResetIndex()
    {
        index = 1;
    }

    private async Task Delete(Guid id)
    {
        //pass paremeters to dialog like as button color, text, content text
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete category" },
            { x => x.Color, Color.Error }
        };

        //setups for dialog - close button, max width
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        //if user confirm delete action then delete category
        if (result.Data is not null)
        {
            await BookService.DeleteCategory(id);
            CategoryList = await BookService.GetCategories();
            Snackbar.Add("The category has been successfully deleted.", Severity.Warning);


        }
    }

    // handle button edit category
    private async void Edit(CategoryDto category)
    {
        //pass paremeters to EditCategoryDialog like as button color, text, content text and category to edit
        var parameters = new DialogParameters<EditCategoryDialog>
        {
            { x => x.ContentText, "Edit category." },
            { x => x.ButtonText, "Save changes" },
            { x => x.Color, Color.Primary },
            { x => x.Category, category}
        };

        //setups for dialog - close button, max width
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large };
        var dialog = await DialogService.ShowAsync<EditCategoryDialog>("Edit", parameters, options);
        var result = await dialog.Result;

        if (result.Data is not null)
        {
            await BookService.UpdateCategory(result.Data as CategoryDto);
            Snackbar.Add("The category has been successfully modified.", Severity.Info);

            StateHasChanged();
        }
    }

    // handle button add category
    private async void AddCategory()
    {
        //pass paremeters to AddCategoryDialog like as button color, text, content text
        var parameters = new DialogParameters<AddCategoryDialog>
        {
            { x => x.ContentText, "Add new category." },
            { x => x.ButtonText, "Add" },
            { x => x.Color, Color.Success }
        };

        //setups for dialog - close button, max width
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<AddCategoryDialog>("", parameters, options);
        var result = await dialog.Result;


        if (result.Data is not null)
        {
            await BookService.AddCategory(result.Data as CategoryDto);
            CategoryList = await BookService.GetCategories();
            Snackbar.Add("The category has been successfully added.", Severity.Success);
            StateHasChanged();
        }
    }
    // ==============================================================================================================================


    // ===================================================== for images purposes ====================================================
    private IBrowserFile file;
    private string imageData;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        file = e.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        imageData = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }

    private void SubmitForm()
    {
        // Logika przesyłania obrazu na serwer
        Console.WriteLine("Obraz przesłany.");
    }

    private IBrowserFile? selectedFile;
    private byte[] tempCoverImage = Array.Empty<byte>();

    private async Task UploadFiles(IBrowserFile file)
    {
        selectedFile = file;
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer);
        tempCoverImage = buffer;

    }

    private string GetImageSrc(byte[]? coverImage)
    {
        if (coverImage == null || coverImage.Length == 0)
            return "https://cdn.iconscout.com/icon/free/png-256/free-photo-camera-1780425-1517754.png";
        //return null;
        var base64Image = Convert.ToBase64String(coverImage);
        return $"data:image/png;base64,{base64Image}";
    }
}

